开发模式：
1. 前端程序员写好页面给后端，让后端程序员去渲染页面
2. 前端程序员单写前端，后端程序员写接口，前端程序员向后端程序员要接口数据，然后
前端程序员填充页面
3. SSR 技术。服务端渲染，可以在服务端把页面渲染好直接给前端
前端的三大框架 ： angular 、 react 、vue( 相当于 java 的 spring)
每天作业必须要给我，中午软技能
angular(趋势不太好) \ react( 目前比较好 )\微信小程序\node
接下来我们的重点就是 VUE
java ssh = spring + struts + hibernate 现在没讲了
<html>
<head></head>
<body>
<div> </div>
</body>
</html>
<html>
<head></head>
<body>
<div> </div>
</body>
<script>
document.getElemntById(“div”).in
nerText = “xxx”;
</script>
</html>
Baidu\sougou\biying
http://geek.ke.qq.com
极客营
把 把 webstorm  重新装一下
VSCode c#
1.  为什么要学习 vue
1)  如何提高开发效率
为了提高开发效率。
提高开发效率经历的过程：
1.原生的 js : document.getElementById(“my”).innerHTML = “张三”;
2.jquery : $(“#my”).html(“张三”);
3.模板引擎 : artTemplate EJS 给数据、给模板就可以渲染页面
4.angular / vue
2)  什么是 vue
Vue.js 是一个 渐进式的框架
Vue.js 是目前最流行的前端框架
React 是目前最好的前端框架
Vue.js  的核心：数据驱动、组件化、vuex
3) 双向数据绑定
模型层 à 视图层 ： 当模型层的数据变化之后，视图层会自动发生变化
视图层 à 模型层 ： 当视图层的数据改变之后，模型层层的数据会同步更新
需要注意的是：双向数据绑定只在表单元素中生效(input textarea select)
是说在非表单元素中，只是做了从模型层到视图层的数据绑定
4)  设计思想
MVC ： Model(模型层) View(视图层) Controller(控制器层) 其实是从后端引进过来
MVC 暴露两个痛点：
1. model 和 view 强耦合
http://geek.ke.qq.com
极客营
2. 所有的逻辑都放在 controller 层处理，从而导致 controller 层代码量非常大
MVP
MVVM ：Model View ViewModel(把视图层的逻辑放到了 ViewModel 里面)
MVC ：后端的主流框架 springMVC struts2 Express
MVVM：前端的主流框架 Angular Vue
2. Vue  的使用
1) vue 的基 的基 本 使用
第一步： 在页面引入 vue.js 文件
<script src="./lib/vue-2.4.0.js"></script>
第三步：在 script 标签中创建 vue 实例
var vm = new Vue({
//要控制页面上的哪个区域
el:"#app",
//模型层的数据 Model
data:{
msg:"测试信息",
data:"123"
},
//所有页面中要用到的方法
methods:{
modify:function(){
this.msg = "修改了测试信息"
},
show:function(){
alert(this.data);
}
}
})
第三步：在页面中使用 vue 实例中的数据
http://geek.ke.qq.com
极客营
<!---View-->
<div id="app">
<!--插值表达式-->
{{ msg }}
<input type="button" value="点我" @click="modify">
<!--使用v-model绑定了模型层中的data的数据-->
<input type="text" v-model="data">
<input type="button" value="查看模型层中的data的数据"
@click="show">
</div>
2) Vue  指令
A. v-cloak
可以解决插值表达式的闪烁的问题：在vue.js没有加载完毕之前，页面会显示
{{msg}}}，知道vue.js加载完毕之后，才会显示真正显示
<div v-cloak>
{{ msg }}
</div>
<style>
/*属性选择器*/
[v-cloak]{
display: none;
}
</style>
B. v-text/v-html
<!--v-text是将数据当成普通文本替换整个标签的内容-->
<div style="background: green" v-text="data">
前 后
</div>
http://geek.ke.qq.com
极客营
<!--v-html是将数据当成网页替换整个标签的内容-->
<div style="background: blue" v-html="data">
前 后
</div>
C. v-bind
<!--v-bind是用来绑定标签的属性-->
<input type="text" v-bind:value="value">
<!--:开头的是在绑定属性-->
<input type="text" :value="value2">
D. v-on
<!--给input标签绑定input事件，当用户输入文本的时候会触发 myinput 方法
-->
<input type="text" v-on:input="myinput">
<!--@开头的是在绑定事件-->
<input type="text" @input="myinput2">
<!--给input绑定click事件，触发showme方法-->
<input type="button" value="点我3" @click="showme">
<!--下面代码会报错，因为我们给 input 绑定了 alert 方法，此时会从 ViewModel
实例中去找alert方法，但是我们在vm实例中并没有定义这个alert方法，所
以报错-->
<input type="button" value="点我1" @click="alert('hello')">
<!--下面代码不会报错，此时就是用普通的js代码绑定alert事件-->
<input type="button" value="点我2" onclick="alert('hello')">
<!--强调：以后我们凡是看到: @ 符号绑定信息，都会从VM实例中去找，如果
找不到报错-->
3) 事 事 件 修饰符
<div class="parent" @click="parentClick">
<!--click.self只有触发在自己身上的事件才会执行,子元素冒泡到当前
http://geek.ke.qq.com
极客营
元素上的事件不执行-->
<div class="sub" @click.self="subClick">
<!--click.stop 阻止事件冒泡 -->
<div class="child" @click.stop="childClick">
</div>
</div>
</div>
<!--click.prevent 阻止默认事件-->
<a href="http://www.baidu.com" @click.prevent="aClick">点我点我</a>
<div @click.once="onceClick">只能点击一次</div>
4) Vue  的双向绑定
在 vue 中要做数据的双向绑定需要使用 v-model 指令，这个指令需要用在表单元素中
之前我们学的 v-bind v-text 等等指令不是双向绑定的指令，只有 v-model 是
<div id="app">
<!--双向绑定用的指令是v-model
双向绑定的含义：模型层的数据变了，页面也变；页面上的数据变了，
模型层中的数据也变-->
<input type="email" v-model="email">
<input type="text" v-model="name">
<input type="button" value="修改数据" @click="modify">
<input type="button" value="显示数据" @click="show">
</div>
const vm = new Vue({
el:"#app",
data:{
email:"zhangsan@qq.com",
name:"zhangsan"
},
methods:{
modify(){
this.email = "lisi@qq.com"
http://geek.ke.qq.com
极客营
this .name = "lisi"
},
show(){
console.log( this .email, this .name)
}
}
})
5)  类操 作
<p class="thin red italic active">文本文本</p>
<!--注意：这边在使用样式的时候，必须要加单引号，如果没有单引号，则 vue
会认为该内容是一个模型层的变量，会去模型层中找对应的信息，找不到就报错
-->
<p :class="['thin','red']">文本文本 2222</p>
<p :class="['thin','red',flag?'italic':'']">文本文本 3333</p>
<p :class="['thin','red',{'italic':flag},{'active':flag}]">文本文本
4444</p>
<p :class="classObj">文本文本 5555</p>
6) Vue 的 样 式 操 作
<div style="background: #6aff82">
div 文本
</div>
http://geek.ke.qq.com
极客营
<div :style="styleObj1"> div文本2</div>
<div :style="[styleObj1,styleObj2]"> div文本3</div>
7) v-if 和 和 v-show
如果需要非常频繁地切换条件，则使用  v-show 较好；如果在运行时条件很少改变，则使
用  v-if 较好。
区别：v-show 不管条件是否成立，都会渲染组件，只是在于该组件的 display 为 none 还是
block 而已。
v-if 当条件不成立的时候，不会渲染组件
<input type="button" value="点我切换页面" @click="flag=!flag">
<div v-if="flag">显示登录页面</div>
<div v-else>显示注册页面</div>
<div v-show="flag">
使用v-show来显示
</div>
8) v-for
<ul>
<!--遍历集合，集合中放简单字符串、数值等-->
<li v-for="(item,idx) in list">
{{ idx }} ----> {{ item }}
</li>
</ul>
<ul>
<!--遍历对象-->
<li v-for="(value,key) in obj">
{{ value }} ----> {{ key }}
</li>
</ul>
<ul>
<!--遍历集合，集合中放对象-->
<li v-for="(item,idx) in list2">
{{ idx }} ----> {{ item.name }} --->{{ item.age }}
--->{{ item.gender }}
</li>
http://geek.ke.qq.com
极客营
</ul>
<!--遍历数值-->
<p v-for="count in 10">
{{ count }}
</p>
注意点：在 遍历集合 的 时候 ，一定要使用:key ， ， 上面写法仅供参照
9)  品牌管理案例
<tr v-for="item in search()" :key="item.id">
在 search()函数中返回具体的集合数据
还需要注意：在 this.list.filter() 和 this.list.sort() 和 this.list.findIndex()等方法的时候都需要如
此那一个函数，这个函数推荐使用箭头函数来写，以避免函数中的 this 指向的问题。所入参
的函数的返回值一般情况下都是 true 或者 false
http://geek.ke.qq.com
极客营
